{
  
    
        "post0": {
            "title": "Exercise02",
            "content": "from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from bs4 import BeautifulSoup import requests url = &#39;http://www.yes24.com/Main/default.aspx&#39; driver = webdriver.Chrome() # driver.get(url) elem = driver.find_element(By.ID, &#39;query&#39;) elem.send_keys(&#39;파이썬&#39;) # 검색 버튼 찾기 elem = driver.find_element(By.XPATH, &#39;//*[@id=&quot;yesSForm&quot;]/fieldset/span[2]/button&#39;) # elem.send_keys(Keys.ENTER) # 검색 버튼 찾은거 클릭 elem.click() # 데이터 가져오기 soup = BeautifulSoup(driver.page_source, &#39;lxml&#39;) # parsing book_list = soup.find(&#39;ul&#39;, attrs={&#39;id&#39;: &#39;yesSchList&#39;}) # &#39;ul&#39; -&gt; 책 데이터 전체 다 들어있음 books = book_list.find_all(&#39;li&#39;) # &#39;li&#39; -&gt; 각 책별 데이터 포함 for i, book in enumerate(books) : title = book.find(&#39;a&#39;, attrs={&#39;class&#39; : &#39;gd_name&#39;}) price = book.find(&#39;strong&#39;, attrs={&#39;class&#39; : &#39;txt_num&#39;}) rating = book.select(&#39;span.rating_grade em&#39;) # select -&gt; tag명, class 명 동시에 쓸 수 있음 if not rating : continue # 별점 -&gt; 소수점 포함한 실수로 float으로 감싸기 if float(rating[0].get_text()) &lt; 9.6 : continue print(title.get_text(), price.get_text(), rating[0].get_text()) . Do it! 점프 투 파이썬 16,920원 9.6 혼자 공부하는 머신러닝+딥러닝 23,400원 10.0 Do it! 점프 투 파이썬 + Do it! 파이썬 생활 프로그래밍 34,920원 9.6 파이썬 코딩의 기술(개정2판) 28,800원 9.6 Do it! 자료구조와 함께 배우는 알고리즘 입문 : 파이썬 편 19,800원 9.6 Do it! 점프 투 파이썬 + Do it! 자료구조와 함께 배우는 알고리즘 입문 : 파이썬 편 + Do it! 파이썬 생활 프로그래밍 54,720원 9.6 Do it! 점프 투 파이썬 + Do it! 첫 파이썬 29,520원 9.6 Do it! 첫 파이썬 12,600원 9.7 파이썬 증권 데이터 분석 28,800원 9.6 쉽게 따라 만드는 파이썬 주식 자동매매 시스템 25,200원 9.6 모두의 인공지능 with 파이썬 19,800원 10.0 .",
            "url": "https://070770.github.io/temp/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/11/22/Exercise02_%ED%92%80%EC%9D%B4.html",
            "relUrl": "/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/11/22/Exercise02_%ED%92%80%EC%9D%B4.html",
            "date": " • Nov 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Exercise01",
            "content": "[&#50672;&#49845;-1] . 1) 멜론 사이트에서 국내 최신곡 10위까지의 정보를 노래제목, 가수, 앨범, 좋아요 수를 출력하시오 | . import requests from bs4 import BeautifulSoup URL = &quot;https://www.melon.com/new/index.htm&quot; headers = {&#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#39;} response = requests.get(URL, headers = headers) response.raise_for_status() soup = BeautifulSoup(response.text.replace(&quot; n&quot;,&quot;&quot;), &quot;lxml&quot;) . temp = soup.find_all(&#39;div&#39;, attrs = {&#39;class&#39;:&#39;wrap_song_info&#39;}) for i in range(20): if i % 2 == 0: song = temp[i].find_all(&#39;div&#39;,attrs = {&#39;class&#39;:&#39;ellipsis rank01&#39;}) singer = temp[i].find_all(&#39;div&#39;,attrs = {&#39;class&#39;:&#39;ellipsis rank02&#39;}) singer_name = temp[i].find_all(&#39;span&#39;,attrs = {&#39;class&#39;:&#39;checkEllipsis&#39;}) album = temp[int(i/2+1)].find_all(&#39;div&#39;,attrs = {&#39;class&#39;:&#39;ellipsis rank03&#39;}) for j in range(len(song)): song_title = song[j].get_text() s_n = singer_name[j].get_text() for k in range(len(song)): s_n = singer_name[k].get_text() print(int((i/2+1)),&#39;:&#39;,song_title,&quot;&lt;&quot;+s_n+&quot;&gt;&quot;,&quot;앨범명:&quot;) else: continue . temp = soup.find_all(&#39;div&#39;, attrs = {&#39;class&#39;:&#39;wrap_song_info&#39;}) album = temp[11].find_all(&#39;div&#39;,attrs = {&#39;class&#39;:&#39;ellipsis rank03&#39;}) ab = album[0].get_text() print(ab) #ab = album[0].find_all # singer_name = temp[0].find_all(&#39;span&#39;,attrs = {&#39;class&#39;:&#39;checkEllipsis&#39;}) # for i in range(20): # singer = temp[i].find_all(&#39;div&#39;,attrs = {&#39;class&#39;:&#39;ellipsis rank02&#39;}) # for j in range(len(singer)): # singer_name = singer[j].get_text() # print(i,singer_name) # print(int((i/2+1)),&#39;:&#39;,song_title) . &#50536;&#48276; &#47749; &#45347;&#44592; &#47560;&#51200; &#54869;&#51064; . [&#50672;&#49845;-2] . 2) 네이버에서 이미지를 검색한 후 나온 결과 중 5개의 이미지를 저장 자바 스크립트로 인해 기존 방식으로 진행시 이미지 호출 불가 | . | . 셀레늄 다운로드 pip install selenium 셀레늄 다운로드 상태, 버전 확인 pip show selenium . 구글에서 &#39;chrome://version&#39; 확인 chromedriver 검색 후 버전에 맞는 파일 다운 및 압축 해제(작업환경에 압축 해제 권유) . import requests import os import time from bs4 import BeautifulSoup from selenium import webdriver . URL = &quot;https://search.naver.com/search.naver?where=image&amp;sm=tab_jum&amp;query=%EA%B3%A0%EA%B8%B0&quot; headers = {&#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#39;} . driver = webdriver.Chrome() driver.get(URL) # 이동 후 1초간 대기 time.sleep(1) . soup = BeautifulSoup(driver.page_source) # 셀레늄으로 특정사이트 이동 후 내용 다시 긁어오기 # print(soup) # 웹 확인용 # with open(&#39;bts.html&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;) as f: # f.write(response.text) # print(&#39;a&#39;) . meats_img = soup.find_all(&#39;img&#39;, attrs = {&#39;class&#39;:&quot;_image _listImage&quot;}) print(&quot;그림 갯수 :&quot;, len(meats_img)) # 첫 화면에 보이는 이미지 갯수 -&gt; 실제로는 스크롤할수록 계속 나옴 . 그림 갯수 : 48 . img_dir = &#39;./meats_img/&#39; # 폴더 생성, 폴더명 중복시 생성 안함 if not os.path.exists(img_dir): os.makedirs(img_dir) print(&quot;폴더 생성&quot;) else: print(&quot;폴더 존재&quot;) . 폴더 생성 . for i, image in enumerate(meats_img): img_url = image[&#39;src&#39;] # 이미지 소스 호출 if not (img_url.startswith(&#39;http&#39;)): continue img_src = requests.get(img_url, headers = headers) img_src.raise_for_status() with open(img_dir + &#39;meats_{}.jpg&#39;.format(i),&#39;wb&#39;) as f: # print(img_src) f.write(img_src.content) if i &gt;= 10: break print(&#39;사진 저장 완료&#39;) . &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; &lt;Response [200]&gt; 사진 저장 완료 . # .startswith(&quot;해당 문구&quot;) -&gt; 해당 문구로 시작하는지 확인 # .endswith(&quot;해당 문구&quot;) -&gt; 해당 문구로 끝나는지 확인 temp1 = &quot;http://www.naver.com&quot; temp2 = &quot;http://www.daum.net&quot; print(temp1.startswith(&#39;http&#39;)) print(temp2.startswith(&#39;http&#39;)) print(temp1.endswith(&#39;com&#39;)) print(temp2.endswith(&#39;com&#39;)) . True True True False .",
            "url": "https://070770.github.io/temp/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/11/22/Exercise01.html",
            "relUrl": "/%ED%81%AC%EB%A1%A4%EB%A7%81/python/2021/11/22/Exercise01.html",
            "date": " • Nov 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://070770.github.io/temp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://070770.github.io/temp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://070770.github.io/temp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}